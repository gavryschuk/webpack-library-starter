!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("wordsai",[],e):"object"==typeof exports?exports.wordsai=e():t.wordsai=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(r,o,function(e){return t[e]}.bind(null,o));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){"use strict";e.__esModule=!0;var r=i(1);e.NODE_SEP=";",e.STRING_SEP=",",e.TERMINAL_PREFIX="!",e.MIN_LETTER="a",e.MAX_LETTER="z",e.MAX_WORD=new Array(10).join(e.MAX_LETTER);var o=new RegExp("(["+e.MIN_LETTER+"-"+e.MAX_LETTER+"]+)("+e.STRING_SEP+"|[0-9A-Z]+|$)","g"),n=new RegExp("([0-9A-Z]+):([0-9A-Z]+)"),s=function(){function t(t){for(this.syms=[],this.nodes=t.split(e.NODE_SEP),this.syms=[],this.symCount=0;;){var i=n.exec(this.nodes[this.symCount]);if(!i)break;if(r.fromAlphaCode(i[1])!==this.symCount)throw new Error("Invalid Symbol name - found "+i[1]+" when expecting "+r.toAlphaCode(this.symCount));this.syms[this.symCount]=r.fromAlphaCode(i[2]),this.symCount++}this.nodes.splice(0,this.symCount)}return t.prototype.isWord=function(t){return""!==t&&this.match(t)===t},t.prototype.match=function(t){var e=this.matches(t);return 0===e.length?"":e[e.length-1]},t.prototype.matches=function(t){return this.words(t,t+e.MIN_LETTER)},t.prototype.completions=function(t,i){return this.words(t,function(t){if(0===t.length)return e.MAX_WORD;var i=t.charCodeAt(t.length-1);return t.slice(0,-1)+String.fromCharCode(i+1)}(t),i)},t.prototype.words=function(t,i,r){var o=[];return this.enumerate(0,"",{from:t,beyond:i,fn:function(t,e){void 0!==r&&o.length>=r?e.abort=!0:o.push(t)},prefixes:t+e.MIN_LETTER===i}),o},t.prototype.enumerate=function(t,i,r){var n=this,s=this.nodes[t];function a(t){r.prefixes?t===r.from.slice(0,t.length)&&r.fn(t,r):r.from<=t&&t<r.beyond&&r.fn(t,r)}if(s[0]===e.TERMINAL_PREFIX){if(a(i),r.abort)return;s=s.slice(1)}s.replace(o,function(o,s,h){var u=i+s;return r.abort||u>=r.beyond||u<r.from.slice(0,u.length)?"":h===e.STRING_SEP||""===h?(a(u),""):(n.enumerate(n.inodeFromRef(h,t),u,r),"")})},t.prototype.inodeFromRef=function(t,e){var i=r.fromAlphaCode(t);return i<this.symCount?this.syms[i]:e+(i-=this.symCount)+1},t}();e.PTrie=s},function(t,e,i){"use strict";e.__esModule=!0,e.BASE=36;var r=function(){return function(){}}();e.PTrie=r,e.toAlphaCode=function(t){for(var i="",r=1,o=e.BASE;t>=o;t-=o,r++,o*=e.BASE);for(;r--;){var n=t%e.BASE;i=String.fromCharCode((n<10?48:55)+n)+i,t=(t-n)/e.BASE}return i},e.fromAlphaCode=function(t){for(var i=0,r=1,o=e.BASE;r<t.length;i+=o,r++,o*=e.BASE);for(var n=t.length-1,s=1;n>=0;n--,s*=e.BASE){var a=t.charCodeAt(n)-48;a>10&&(a-=7),i+=a*s}return i}},function(t,e,i){"use strict";function r(t,e,i){void 0===i&&(i="asc");var r=0;return t<e?r=-1:t>e&&(r=1),"asc"===i?r:-r}e.__esModule=!0,e.sortByValues=function(t,e){void 0===e&&(e="asc");var i=[];for(var o in t)i.push([o,t[o]]);return i.sort(function(t,i){return r(t[1],i[1],e)}),i},e.unique=function(t,e){void 0===e&&(e=r),t.sort(e);for(var i=1;i<t.length;i++)0===e(t[i-1],t[i])&&t.splice(i,1)}},function(t,e,i){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=((r=i(4))&&r.__esModule?r:{default:r}).default;e.default=o,t.exports=e.default},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(5);function o(t){return function(t){if(Array.isArray(t)){for(var e=0,i=new Array(t.length);e<t.length;e++)i[e]=t[e];return i}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function n(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._dictionaries={},this.endBoard()}return s(t,[{key:"alphabet",get:function(){if(!this._a){this._a=[];for(var t="a".charCodeAt(0),e="z".charCodeAt(0);t<=e;++t)this._a.push(String.fromCharCode(t))}return this._a}},{key:"points",get:function(){return this._points}},{key:"boardSize",get:function(){return this._boardSize}},{key:"usedWords",get:function(){return this._usedWords}},{key:"board",get:function(){return this._board}},{key:"dictionaries",get:function(){return this._dictionaries}}]),s(t,[{key:"addMainDictionary",value:function(t,e){this._addDictionary(t,e),this._mainDictionary=this._dictionaries[t]}},{key:"addSecondaryDictionary",value:function(t,e){this._addDictionary(t,e),this._secondaryDictionary=this._dictionaries[t]}},{key:"startBoard",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._defaultBoardSize;this._boardSize=t,this._cleanBoard(),this._setInitialRandomWord()}},{key:"endBoard",value:function(){this._points=0,this._boardSize=this._defaultBoardSize,this._usedWords=[],this._mainDictionary=null,this._secondaryDictionary=null,this._cleanBoard()}},{key:"isUsedWord",value:function(t){return!t||!this._usedWords||this._usedWords.find(function(e){return e.toLowerCase()===t.toLowerCase()})}},{key:"doesWordExist",value:function(t){if(!t)return!1;var e=this._getLetterID([].concat(o(t))[0]);return this._getWordsArrayByLetterID(e).find(function(e){return e.toLowerCase()===t.toLowerCase()})}},{key:"checkPossibleCells",value:function(t,e,i,r){if(t<0||e<0||(i?e:t)+r>this._boardSize)return!1;for(var o=0,n=0,s=0;s<r;s++){var a=i?t:t+s,h=i?e+s:e,u=this._board[h][a];this._isAString(u)?n++:(u>=3||i&&1===u||!i&&2===u)&&o++}return!(n===r||o||!n&&this._usedWords.length)}},{key:"addWord",value:function(t,e,i){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return!i||!i.length||i.length<3?(console.log("word length is less than 3 letters!"),!1):this.checkPossibleCells(t,e,r,i.length)?this._checkPossibleLetters(t,e,i,r)?this.isUsedWord(i)?(console.log("word is already used"),!1):this.doesWordExist(i)?([].concat(o(i)).forEach(function(i,o){var n=e+(r?o:0),s=t+(r?0:o);this._board[n][s]=i.toLowerCase();for(var a=0;a<2;a++){var h=s+(r?a?1:-1:0),u=n+(r?0:a?1:-1);if(!(h<0||h>=this._boardSize||u<0||u>=this._boardSize)){var l=this._board[u][h];r&&!this._isAVerticalBlocker(l)&&(this._board[u][h]+=1),r||this._isAHorizontalBlocker(l)||(this._board[u][h]+=2)}}},this),r?(e&&(this._board[e-1][t]=3),e+i.length<this._boardSize&&(this._board[e+i.length][t]=3)):(t&&(this._board[e][t-1]=3),t+i.length<this._boardSize&&(this._board[e][t+i.length]=3)),this._usedWords.push(i),this._checkPointsForWord(i),!0):(console.log("word doesn't exist in dictionary"),!1):(console.log("possible letters check failed!"),!1):(console.log("possible cells check failed!"),!1)}},{key:"getHintWord",value:function(){for(var t={x:0,y:0,vertical:!1,word:null},e=t,i=0;i<this._boardSize;i++)for(var r=0;r<this._boardSize;r++){var o=this._board[i][r];if(this._isAString(o)&&((e=this._findPossibleWord(r,i)).word&&(!t.word||t.word&&e.word.length>t.word.length)&&(t=e),t.word&&t.word.length===this._boardSize))return t}return t}},{key:"_isAString",value:function(t){return"string"==typeof t}},{key:"_isANumber",value:function(t){return!this._isAString(t)}},{key:"_isAVerticalBlocker",value:function(t){return!this._isANumber(t)||1===t||t>=3}},{key:"_isAHorizontalBlocker",value:function(t){return!this._isANumber(t)||2===t||t>=3}},{key:"_checkPossibleLetters",value:function(t,e,i){for(var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=0;n<i.length;n++){var s=r?t:t+n,a=r?e+n:e,h=this._board[a][s];if(this._isAString(h)&&h!==[].concat(o(i))[n])return!1}return!0}},{key:"_addDictionary",value:function(t,e){if(!(t in this._dictionaries)){var i=new r.Trie(e);this._dictionaries[t]=new r.PTrie(i.pack())}}},{key:"_cleanBoard",value:function(){this._board=[];for(var t=0;t<this._boardSize;t++){for(var e=[],i=0;i<this._boardSize;i++)e.push(0);this._board.push(e)}}},{key:"_setInitialRandomWord",value:function(){for(var t=null,e=Math.floor(Math.random()*(this.alphabet.length-2));!t;){for(var i=this._getWordsArrayByLetterID(e,1),r=0;r<i.length;r++){var o=i[r];if(!(this.isUsedWord(o)||o.length<Math.floor(.5*this._boardSize)||o.length>=Math.floor(this._boardSize))){t=o;break}}e=e<this.alphabet.length-1?e+1:0}var n=Math.floor(.5*(this._boardSize-t.length)),s=Math.floor(.4*this._boardSize+Math.random()*(.2*this._boardSize));this.addWord(n,s,t)}},{key:"_getLetterID",value:function(t){for(var e=0;e<this.alphabet.length;e++)if(this.alphabet[e].toLowerCase()===t.toLowerCase())return e;return 0}},{key:"_getWordsArrayByLetterID",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=this.alphabet[t],r=this.alphabet[t<this.alphabet.length-1?t+1:0],o=[],n=e?this._secondaryDictionary:this._mainDictionary;return n&&(o=n.words(i,r)),n=null,o}},{key:"_findPossibleWord",value:function(t,e){for(var i=null,r=null,o=0,n=0,s=!1,a=0;a<2;a++)if(s=!!a,(i=this._generateRegExp(t,e,s))&&(r=this._findWordByRegExp(i.regExp))){for(var h=0;h<=i.before+1;h++)if(h<r.length&&r[h].toString()===this._board[e][t].toString()&&(s?e:t)-h>=0&&(s?e:t)-h+r.length<=this._boardSize){var u=s?t:t+i.between+(i.between?1:0),l=s?e+i.between+(i.between?1:0):e;if(this._board[l][u]===r[h+i.between+(i.between?1:0)]){o=s?t:t-h,n=s?e-h:e;break}}if(r)break}return{x:o,y:n,word:r,vertical:s}}},{key:"_generateRegExp",value:function(t,e){var i=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o="",n=Math.max(this._boardSize-(r?e:t),r?e:t),s=new Array(this._boardSize);s[r?e:t]=this._board[e][t];for(var a=!1,h=!1,u=0,l=function(t){var e=r&&i._isAVerticalBlocker(t),o=!r&&i._isAHorizontalBlocker(t);return e||o},d=function(t,e,o,n){(r?e-o:t-o)>0&&n&&i._isAString(i._board[r?e-o-1:e][r?t:t-o-1])&&(s[r?e-o-1:t-o-1]=null)},f=1;f<n;f++){var c=null;(r?e:t)-f>=0&&!a&&(l(c=this._board[r?e-f:e][r?t:t-f])?this._isAString(c)&&!u?(s[r?e-f:t-f]=c,u++):(a=!0,f>1&&this._isAString(c)&&(s[r?e-f+1:t-f+1]=null)):s[r?e-f:t-f]="[a-z]"),(r?e:t)+f<this._boardSize&&!h&&(l(c=this._board[r?e+f:e][r?t:t+f])?this._isAString(c)&&!u?(s[r?e+f:t+f]=c,u++):(h=!0,f>1&&this._isAString(c)&&(s[r?e+f-1:t+f-1]=null),d(t,e,f,u)):(s[r?e+f:t+f]="[a-z]",d(t,e,f,u)))}o+="^(";var p=0,_=0,v=0,g=0;return u=0,s.forEach(function(t,e){t&&"[a-z]"===t?_++:t&&(u||(p=_),1===++u?o+="[a-z]{0,"+_+"}"+t.toLowerCase():2===u&&(g=_,o+="[a-z]{"+_+"}"+t.toLowerCase()),v+=_,_=0)},this),_&&(o+="[a-z]{0,"+_+"}"),o+=")$",(v+=_)?{before:p,between:g,totalFree:v,regExp:o}:null}},{key:"_findWordByRegExp",value:function(t){for(var e=null,i=Math.floor(Math.random()*(this.alphabet.length-2)),r=i,o=new RegExp(t);!e;){var n=this._getWordsArrayByLetterID(r,1);if(e=null,n.forEach(function(t){t.match(o)&&t.length>=3&&!this.isUsedWord(t)&&(!e||t.length>e.length)&&(e=t)},this),e)break;if((r=r<this.alphabet.length-1?r+1:0)===i)break}return e}},{key:"_checkPointsForWord",value:function(t){if(t&&!(this._usedWords.length<3)){t=t.toLowerCase();var e=this._getLetterID([].concat(o(t))[0]);this._getWordsArrayByLetterID(e,1).find(function(e){return e===t})&&(this._points+=t.length)}}},{key:"_defaultBoardSize",get:function(){return 11}}]),t}();e.default=a,t.exports=e.default},function(t,e,i){"use strict";e.__esModule=!0;var r=i(6);e.Trie=r.Trie;var o=i(0);e.PTrie=o.PTrie},function(t,e,i){"use strict";e.__esModule=!0;var r=i(0),o=i(1),n=i(7),s=i(2),a=i(8),h=!1,u=function(){function t(t){this.root=new a.Node,this.lastWord="",this.suffixes={},this.cNext=1,this.wordCount=0,this.vCur=0,this.insertWords(t)}return t.prototype.insertWords=function(t){var e;if(void 0!==t){for("string"==typeof t&&(t=t.split(/[^a-zA-Z]+/)),e=0;e<t.length;e++)t[e]=t[e].toLowerCase();for(s.unique(t),e=0;e<t.length;e++)this.insert(t[e])}},t.prototype.insert=function(t){this._insert(t,this.root);var e=this.lastWord;if(this.lastWord=t,l(t,e)!==e){var i=this.uniqueNode(e,t,this.root);i&&this.combineSuffixNode(i)}},t.prototype._insert=function(t,e){var i,r,o;if(0!==t.length){for(o in e)if(e.hasOwnProperty(o)&&0!==(i=l(t,o)).length){if(o===i&&a.Node.isNode(e.child(o)))return void this._insert(t.slice(i.length),e.child(o));if(o===t&&e.isTerminalString(o))return;return(r=new a.Node).setChild(o.slice(i.length),e.child(o)),this.addTerminal(r,t=t.slice(i.length)),e.deleteChild(o),e.setChild(i,r),void this.wordCount++}this.addTerminal(e,t),this.wordCount++}},t.prototype.addTerminal=function(t,e){if(e.length<=1)t.setChild(e,1);else{var i=new a.Node;t.setChild(e[0],i),this.addTerminal(i,e.slice(1))}},t.prototype.optimize=function(){this.combineSuffixNode(this.root),this.prepDFS(),this.countDegree(this.root),this.prepDFS(),this.collapseChains(this.root)},t.prototype.combineSuffixNode=function(t){if(t._c)return t;var e=[];t.isTerminal()&&e.push("!");for(var i=t.props(),r=0;r<i.length;r++){var o=i[r];a.Node.isNode(t.child(o))?(t.setChild(o,this.combineSuffixNode(t.child(o))),e.push(o),e.push(t.child(o)._c)):e.push(o)}var n=e.join("-"),s=this.suffixes[n];return s||(this.suffixes[n]=t,t._c=this.cNext++,t)},t.prototype.prepDFS=function(){this.vCur++},t.prototype.visited=function(t){if(t._v===this.vCur)return!0;t._v=this.vCur},t.prototype.countDegree=function(t){if(void 0===t._d&&(t._d=0),t._d++,!this.visited(t))for(var e=t.props(!0),i=0;i<e.length;i++)this.countDegree(t.child(e[i]))},t.prototype.collapseChains=function(t){var e,i,r="-invalid-";if(!this.visited(t)){for(e=t.props(),i=0;i<e.length;i++){r=e[i];var o=t.child(r);a.Node.isNode(o)&&(this.collapseChains(o),void 0===o._g||1!==o._d&&1!==o._g.length||(t.deleteChild(r),r+=o._g,t.setChild(r,o.child(o._g))))}1!==e.length||t.isTerminal()||(t._g=r)}},t.prototype.isWord=function(t){return this.isFragment(t,this.root)},t.prototype.isFragment=function(t,e){if(0===t.length)return e.isTerminal();if(1===e.child(t))return!0;for(var i=e.props(!0),r=0;r<i.length;r++){var o=i[r];if(o===t.slice(0,o.length))return this.isFragment(t.slice(o.length),e.child(o))}return!1},t.prototype.uniqueNode=function(t,e,i){for(var r=i.props(!0),o=0;o<r.length;o++){var n=r[o];if(n===t.slice(0,n.length))return n!==e.slice(0,n.length)?i.child(n):this.uniqueNode(t.slice(n.length),e.slice(n.length),i.child(n))}},t.prototype.pack=function(){var t,e=this,i=[],s={},a=0;function h(t){var e="",i="";t.isTerminal()&&(e+=r.TERMINAL_PREFIX);for(var n=t.props(),a=0;a<n.length;a++){var h=n[a];if(t.isTerminalString(h))e+=i+h,i=r.STRING_SEP;else{var u=t.child(h);if(s[u._n])e+=i+h+s[u._n],i="";else{var l=o.toAlphaCode(t._n-u._n-1+c);u._g&&l.length>=u._g.length&&t.isTerminalString(u._g)?(e+=i+h+(l=u._g),i=r.STRING_SEP):(e+=i+h+l,i="")}}}return e}this.optimize();var u=new n.Histogram,l=new n.Histogram;!function t(e){if(void 0===e._n){for(var r=e.props(!0),o=0;o<r.length;o++)t(e.child(r[o]));e._n=a++,i.unshift(e)}}(this.root),t=i.length,this.prepDFS(),function t(i){if(!e.visited(i))for(var r=i.props(!0),n=0;n<r.length;n++){var s=r[n],a=i.child(s),h=i._n-a._n-1;h<o.BASE&&l.add(h),u.add(a._n,o.toAlphaCode(h).length-1),t(a)}}(this.root);for(var f=function(){var e=u.highest(o.BASE),i=[];i[-1]=0;for(var r=0,n=0,s=3+o.toAlphaCode(t).length,a=0;a<o.BASE&&void 0!==e[a];a++)i[a]=e[a][1]-s-l.countOf(o.BASE-a-1)+i[a-1],d("savings["+a+"] "+i[a]+" = "+i[a-1]+" +"+e[a][1]+" - "+s+" - "+l.countOf(o.BASE-a-1)+")"),i[a]>=r&&(r=i[a],n=a+1);return[n,e]}(),c=f[0],p=f[1],_=0;_<c;_++)s[p[_][0]]=o.toAlphaCode(_);for(var v=[],g=0;g<t;g++)v[g]=h(i[g]);for(_=c-1;_>=0;_--)v.unshift(o.toAlphaCode(_)+":"+o.toAlphaCode(t-parseInt(p[_][0],10)-1));return v.join(r.NODE_SEP)},t}();function l(t,e){var i,r=Math.min(t.length,e.length);for(i=0;i<r&&t[i]===e[i];i++);return t.slice(0,i)}function d(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];h&&console.log.apply(console,[t].concat(e))}e.Trie=u},function(t,e,i){"use strict";e.__esModule=!0;var r=i(2),o=function(){function t(){this.counts={}}return t.prototype.init=function(t,e){void 0===e&&(e=0),"number"==typeof t&&(t=t.toString()),void 0===this.counts[t]&&(this.counts[t]=0),this.counts[t]+=e},t.prototype.add=function(t,e){void 0===e&&(e=1),this.init(t,e)},t.prototype.countOf=function(t){return this.init(t),this.counts[t]},t.prototype.highest=function(t){return r.sortByValues(this.counts,"desc").slice(0,t)},t}();e.Histogram=o},function(t,e,i){"use strict";e.__esModule=!0;var r=function(){function t(){this._p=0}return t.prototype.child=function(t){return this[t]},t.prototype.setChild=function(t,e){this._g,void 0!==this[t]&&(this._p+=1),this._p,this[t]=e},t.prototype.deleteChild=function(t){this._g,this._p-=1,delete this[t],this._p},t.prototype.isTerminalString=function(t){return"number"==typeof this.child(t)},t.prototype.isTerminal=function(){return this.isTerminalString("")},t.prototype.props=function(e){var i=[];for(var r in this)this.hasOwnProperty(r)&&""!==r&&"_"!==r[0]&&(e&&!t.isNode(this.child(r))||i.push(r));return i.sort(),i},t.countDegree=function(t){new o(t).dfs(function(t,e){"post"!==t&&(void 0===e._d&&(e._d=0),e._d++)})},t.prototype.isSingleton=function(){return 1===this._p&&!this.isTerminal()},t.isNode=function(e){return e instanceof t},t}();e.Node=r;var o=function(){function t(t){this.root=t,this.visitMap=new Map}return t.prototype.reset=function(){return this.visitMap=new Map,this},t.prototype.visit=function(t){this.visitMap.set(t,!0)},t.prototype.visited=function(t){return this.visitMap.get(t)||!1},t.prototype.dfs=function(t){this.reset(),this._dfs(this.root,null,"",t)},t.prototype._dfs=function(t,e,i,r){if(r("pre",t,e,i),!this.visited(t)){this.visit(t);for(var o=0,n=t.props(!0);o<n.length;o++){var s=n[o];this._dfs(t.child(s),t,s,r)}r("post",t,e,i)}},t}();e.Walker=o}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,