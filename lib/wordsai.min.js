!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("wordsai",[],e):"object"==typeof exports?exports.wordsai=e():t.wordsai=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){"use strict";e.__esModule=!0;var r=i(1);e.NODE_SEP=";",e.STRING_SEP=",",e.TERMINAL_PREFIX="!",e.MIN_LETTER="a",e.MAX_LETTER="z",e.MAX_WORD=new Array(10).join(e.MAX_LETTER);var n=new RegExp("(["+e.MIN_LETTER+"-"+e.MAX_LETTER+"]+)("+e.STRING_SEP+"|[0-9A-Z]+|$)","g"),o=new RegExp("([0-9A-Z]+):([0-9A-Z]+)"),s=function(){function t(t){for(this.syms=[],this.nodes=t.split(e.NODE_SEP),this.syms=[],this.symCount=0;;){var i=o.exec(this.nodes[this.symCount]);if(!i)break;if(r.fromAlphaCode(i[1])!==this.symCount)throw new Error("Invalid Symbol name - found "+i[1]+" when expecting "+r.toAlphaCode(this.symCount));this.syms[this.symCount]=r.fromAlphaCode(i[2]),this.symCount++}this.nodes.splice(0,this.symCount)}return t.prototype.isWord=function(t){return""!==t&&this.match(t)===t},t.prototype.match=function(t){var e=this.matches(t);return 0===e.length?"":e[e.length-1]},t.prototype.matches=function(t){return this.words(t,t+e.MIN_LETTER)},t.prototype.completions=function(t,i){return this.words(t,function(t){if(0===t.length)return e.MAX_WORD;var i=t.charCodeAt(t.length-1);return t.slice(0,-1)+String.fromCharCode(i+1)}(t),i)},t.prototype.words=function(t,i,r){var n=[];return this.enumerate(0,"",{from:t,beyond:i,fn:function(t,e){void 0!==r&&n.length>=r?e.abort=!0:n.push(t)},prefixes:t+e.MIN_LETTER===i}),n},t.prototype.enumerate=function(t,i,r){var o=this,s=this.nodes[t];function a(t){r.prefixes?t===r.from.slice(0,t.length)&&r.fn(t,r):r.from<=t&&t<r.beyond&&r.fn(t,r)}if(s[0]===e.TERMINAL_PREFIX){if(a(i),r.abort)return;s=s.slice(1)}s.replace(n,function(n,s,u){var h=i+s;return r.abort||h>=r.beyond||h<r.from.slice(0,h.length)?"":u===e.STRING_SEP||""===u?(a(h),""):(o.enumerate(o.inodeFromRef(u,t),h,r),"")})},t.prototype.inodeFromRef=function(t,e){var i=r.fromAlphaCode(t);return i<this.symCount?this.syms[i]:e+(i-=this.symCount)+1},t}();e.PTrie=s},function(t,e,i){"use strict";e.__esModule=!0,e.BASE=36;var r=function(){return function(){}}();e.PTrie=r,e.toAlphaCode=function(t){for(var i="",r=1,n=e.BASE;t>=n;t-=n,r++,n*=e.BASE);for(;r--;){var o=t%e.BASE;i=String.fromCharCode((o<10?48:55)+o)+i,t=(t-o)/e.BASE}return i},e.fromAlphaCode=function(t){for(var i=0,r=1,n=e.BASE;r<t.length;i+=n,r++,n*=e.BASE);for(var o=t.length-1,s=1;o>=0;o--,s*=e.BASE){var a=t.charCodeAt(o)-48;a>10&&(a-=7),i+=a*s}return i}},function(t,e,i){"use strict";function r(t,e,i){void 0===i&&(i="asc");var r=0;return t<e?r=-1:t>e&&(r=1),"asc"===i?r:-r}e.__esModule=!0,e.sortByValues=function(t,e){void 0===e&&(e="asc");var i=[];for(var n in t)i.push([n,t[n]]);return i.sort(function(t,i){return r(t[1],i[1],e)}),i},e.unique=function(t,e){void 0===e&&(e=r),t.sort(e);for(var i=1;i<t.length;i++)0===e(t[i-1],t[i])&&t.splice(i,1)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(i(4)),n=o(i(9));function o(t){return t&&t.__esModule?t:{default:t}}var s={BE:r.default,FE:n.default};e.default=s,t.exports=e.default},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(5);function n(t){return function(t){if(Array.isArray(t)){for(var e=0,i=new Array(t.length);e<t.length;e++)i[e]=t[e];return i}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e,i){return e&&o(t.prototype,e),i&&o(t,i),t}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._mainDictionary=null,this._dictionaries={}}return s(t,[{key:"getMainDictionary",value:function(){return this._mainDictionary}},{key:"getSecondaryDictionaries",value:function(){return Object.keys(this._dictionaries)}},{key:"alphabet",get:function(){if(!this._a){this._a=[];for(var t="a".charCodeAt(0),e="z".charCodeAt(0);t<=e;++t)this._a.push(String.fromCharCode(t))}return this._a}}]),s(t,[{key:"loadMainDictionary",value:function(t){var e=new r.Trie(t);this._mainDictionary=new r.PTrie(e.pack())}},{key:"loadSecondaryDictionary",value:function(t,e){this._addDictionary(t,e)}},{key:"getHint",value:function(t,e){var i=this;if(!this._mainDictionary||!Object.keys(this._dictionaries).length)return console.log("BE: there are some dictionaries absent in BE"),null;e in this._dictionaries||(console.log("BE: dictionary name is absent in secondary dictionaries list. Used main dictionary instead."),e="main");var r=[];return t.forEach(function(t){var n=i._getWordsByRegExp(t,e);n.length&&(r=r.concat(n))},this),r.sort(function(t,e){return e.length-t.length}),r}},{key:"getWordStats",value:function(t,e){var i=!1,r=0,o=this._getLetterID([].concat(n(t))[0]),s=this._getWordsArrayByLetterID(o);return s.indexOf(t)>=0&&(i=!0),e&&(s=this._getWordsArrayByLetterID(o,e)).indexOf(t)>=0&&(r=t.length),{exists:i,points:r}}},{key:"_addDictionary",value:function(t,e){if(!(t in this._dictionaries)){var i=new r.Trie(e);this._dictionaries[t]=new r.PTrie(i.pack())}}},{key:"_getWordsByRegExp",value:function(t,e){for(var i=[],r=Math.floor(Math.random()*(this.alphabet.length-2)),n=new RegExp(t),o=0;o<this.alphabet.length;o++){this._getWordsArrayByLetterID(r,e).forEach(function(t){t.match(n)&&i.push(t)},this),r=r+o<this.alphabet.length-1?r+o:0}return i}},{key:"_getWordsArrayByLetterID",value:function(t,e){var i,r=this.alphabet[t],n=this.alphabet[t<this.alphabet.length-1?t+1:0],o=this._mainDictionary;return e in this._dictionaries&&(o=this._dictionaries[e]),i=o.words(r,n),o=null,i}},{key:"_getLetterID",value:function(t){for(var e=0;e<this.alphabet.length;e++)if(this.alphabet[e].toLowerCase()===t.toLowerCase())return e;return 0}}]),t}();e.default=a,t.exports=e.default},function(t,e,i){"use strict";e.__esModule=!0;var r=i(6);e.Trie=r.Trie;var n=i(0);e.PTrie=n.PTrie},function(t,e,i){"use strict";e.__esModule=!0;var r=i(0),n=i(1),o=i(7),s=i(2),a=i(8),u=!1,h=function(){function t(t){this.root=new a.Node,this.lastWord="",this.suffixes={},this.cNext=1,this.wordCount=0,this.vCur=0,this.insertWords(t)}return t.prototype.insertWords=function(t){var e;if(void 0!==t){for("string"==typeof t&&(t=t.split(/[^a-zA-Z]+/)),e=0;e<t.length;e++)t[e]=t[e].toLowerCase();for(s.unique(t),e=0;e<t.length;e++)this.insert(t[e])}},t.prototype.insert=function(t){this._insert(t,this.root);var e=this.lastWord;if(this.lastWord=t,l(t,e)!==e){var i=this.uniqueNode(e,t,this.root);i&&this.combineSuffixNode(i)}},t.prototype._insert=function(t,e){var i,r,n;if(0!==t.length){for(n in e)if(e.hasOwnProperty(n)&&0!==(i=l(t,n)).length){if(n===i&&a.Node.isNode(e.child(n)))return void this._insert(t.slice(i.length),e.child(n));if(n===t&&e.isTerminalString(n))return;return(r=new a.Node).setChild(n.slice(i.length),e.child(n)),this.addTerminal(r,t=t.slice(i.length)),e.deleteChild(n),e.setChild(i,r),void this.wordCount++}this.addTerminal(e,t),this.wordCount++}},t.prototype.addTerminal=function(t,e){if(e.length<=1)t.setChild(e,1);else{var i=new a.Node;t.setChild(e[0],i),this.addTerminal(i,e.slice(1))}},t.prototype.optimize=function(){this.combineSuffixNode(this.root),this.prepDFS(),this.countDegree(this.root),this.prepDFS(),this.collapseChains(this.root)},t.prototype.combineSuffixNode=function(t){if(t._c)return t;var e=[];t.isTerminal()&&e.push("!");for(var i=t.props(),r=0;r<i.length;r++){var n=i[r];a.Node.isNode(t.child(n))?(t.setChild(n,this.combineSuffixNode(t.child(n))),e.push(n),e.push(t.child(n)._c)):e.push(n)}var o=e.join("-"),s=this.suffixes[o];return s||(this.suffixes[o]=t,t._c=this.cNext++,t)},t.prototype.prepDFS=function(){this.vCur++},t.prototype.visited=function(t){if(t._v===this.vCur)return!0;t._v=this.vCur},t.prototype.countDegree=function(t){if(void 0===t._d&&(t._d=0),t._d++,!this.visited(t))for(var e=t.props(!0),i=0;i<e.length;i++)this.countDegree(t.child(e[i]))},t.prototype.collapseChains=function(t){var e,i,r="-invalid-";if(!this.visited(t)){for(e=t.props(),i=0;i<e.length;i++){r=e[i];var n=t.child(r);a.Node.isNode(n)&&(this.collapseChains(n),void 0===n._g||1!==n._d&&1!==n._g.length||(t.deleteChild(r),r+=n._g,t.setChild(r,n.child(n._g))))}1!==e.length||t.isTerminal()||(t._g=r)}},t.prototype.isWord=function(t){return this.isFragment(t,this.root)},t.prototype.isFragment=function(t,e){if(0===t.length)return e.isTerminal();if(1===e.child(t))return!0;for(var i=e.props(!0),r=0;r<i.length;r++){var n=i[r];if(n===t.slice(0,n.length))return this.isFragment(t.slice(n.length),e.child(n))}return!1},t.prototype.uniqueNode=function(t,e,i){for(var r=i.props(!0),n=0;n<r.length;n++){var o=r[n];if(o===t.slice(0,o.length))return o!==e.slice(0,o.length)?i.child(o):this.uniqueNode(t.slice(o.length),e.slice(o.length),i.child(o))}},t.prototype.pack=function(){var t,e=this,i=[],s={},a=0;function u(t){var e="",i="";t.isTerminal()&&(e+=r.TERMINAL_PREFIX);for(var o=t.props(),a=0;a<o.length;a++){var u=o[a];if(t.isTerminalString(u))e+=i+u,i=r.STRING_SEP;else{var h=t.child(u);if(s[h._n])e+=i+u+s[h._n],i="";else{var l=n.toAlphaCode(t._n-h._n-1+d);h._g&&l.length>=h._g.length&&t.isTerminalString(h._g)?(e+=i+u+(l=h._g),i=r.STRING_SEP):(e+=i+u+l,i="")}}}return e}this.optimize();var h=new o.Histogram,l=new o.Histogram;!function t(e){if(void 0===e._n){for(var r=e.props(!0),n=0;n<r.length;n++)t(e.child(r[n]));e._n=a++,i.unshift(e)}}(this.root),t=i.length,this.prepDFS(),function t(i){if(!e.visited(i))for(var r=i.props(!0),o=0;o<r.length;o++){var s=r[o],a=i.child(s),u=i._n-a._n-1;u<n.BASE&&l.add(u),h.add(a._n,n.toAlphaCode(u).length-1),t(a)}}(this.root);for(var f=function(){var e=h.highest(n.BASE),i=[];i[-1]=0;for(var r=0,o=0,s=3+n.toAlphaCode(t).length,a=0;a<n.BASE&&void 0!==e[a];a++)i[a]=e[a][1]-s-l.countOf(n.BASE-a-1)+i[a-1],c("savings["+a+"] "+i[a]+" = "+i[a-1]+" +"+e[a][1]+" - "+s+" - "+l.countOf(n.BASE-a-1)+")"),i[a]>=r&&(r=i[a],o=a+1);return[o,e]}(),d=f[0],p=f[1],_=0;_<d;_++)s[p[_][0]]=n.toAlphaCode(_);for(var v=[],g=0;g<t;g++)v[g]=u(i[g]);for(_=d-1;_>=0;_--)v.unshift(n.toAlphaCode(_)+":"+n.toAlphaCode(t-parseInt(p[_][0],10)-1));return v.join(r.NODE_SEP)},t}();function l(t,e){var i,r=Math.min(t.length,e.length);for(i=0;i<r&&t[i]===e[i];i++);return t.slice(0,i)}function c(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];u&&console.log.apply(console,[t].concat(e))}e.Trie=h},function(t,e,i){"use strict";e.__esModule=!0;var r=i(2),n=function(){function t(){this.counts={}}return t.prototype.init=function(t,e){void 0===e&&(e=0),"number"==typeof t&&(t=t.toString()),void 0===this.counts[t]&&(this.counts[t]=0),this.counts[t]+=e},t.prototype.add=function(t,e){void 0===e&&(e=1),this.init(t,e)},t.prototype.countOf=function(t){return this.init(t),this.counts[t]},t.prototype.highest=function(t){return r.sortByValues(this.counts,"desc").slice(0,t)},t}();e.Histogram=n},function(t,e,i){"use strict";e.__esModule=!0;var r=function(){function t(){this._p=0}return t.prototype.child=function(t){return this[t]},t.prototype.setChild=function(t,e){this._g,void 0!==this[t]&&(this._p+=1),this._p,this[t]=e},t.prototype.deleteChild=function(t){this._g,this._p-=1,delete this[t],this._p},t.prototype.isTerminalString=function(t){return"number"==typeof this.child(t)},t.prototype.isTerminal=function(){return this.isTerminalString("")},t.prototype.props=function(e){var i=[];for(var r in this)this.hasOwnProperty(r)&&""!==r&&"_"!==r[0]&&(e&&!t.isNode(this.child(r))||i.push(r));return i.sort(),i},t.countDegree=function(t){new n(t).dfs(function(t,e){"post"!==t&&(void 0===e._d&&(e._d=0),e._d++)})},t.prototype.isSingleton=function(){return 1===this._p&&!this.isTerminal()},t.isNode=function(e){return e instanceof t},t}();e.Node=r;var n=function(){function t(t){this.root=t,this.visitMap=new Map}return t.prototype.reset=function(){return this.visitMap=new Map,this},t.prototype.visit=function(t){this.visitMap.set(t,!0)},t.prototype.visited=function(t){return this.visitMap.get(t)||!1},t.prototype.dfs=function(t){this.reset(),this._dfs(this.root,null,"",t)},t.prototype._dfs=function(t,e,i,r){if(r("pre",t,e,i),!this.visited(t)){this.visit(t);for(var n=0,o=t.props(!0);n<o.length;n++){var s=o[n];this._dfs(t.child(s),t,s,r)}r("post",t,e,i)}},t}();e.Walker=n},function(t,e,i){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,i=new Array(t.length);e<t.length;e++)i[e]=t[e];return i}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function n(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.endBoard()}return o(t,[{key:"defaultBoardSize",get:function(){return 11}},{key:"boardSize",get:function(){return this._boardSize}},{key:"usedWords",get:function(){return this._usedWords}},{key:"board",get:function(){return this._board}},{key:"points",get:function(){return this._points}}]),o(t,[{key:"startBoard",value:function(t){this.endBoard(),this._boardSize=t,this._cleanBoard()}},{key:"endBoard",value:function(){this._points=0,this._boardSize=0,this._usedWords=[],this._cleanBoard()}},{key:"getPossibleWordRegExp",value:function(){var t=[];if(!this._usedWords.length)return t.push("^([a-z]{3,"+Math.ceil(.5*this._boardSize)+"})$"),t;for(var e=0;e<this._boardSize;e++)for(var i=0;i<this._boardSize;i++){var r=this._board[e][i];if(this._isAString(r))this._findPossibleRegExp(i,e).forEach(function(e){t.push(e)})}return t}},{key:"checkPossibleCells",value:function(t,e,i,r){if(t<0||e<0||(i?e:t)+r>this._boardSize)return!1;for(var n=0,o=0,s=0;s<r;s++){var a=i?t:t+s,u=i?e+s:e,h=this._board[u][a];this._isAString(h)?o++:(h>=3||i&&1===h||!i&&2===h)&&n++}return i&&e&&this._isAString(this._board[e-1][t])&&n++,!i&&t&&this._isAString(this._board[e][t-1])&&n++,!(o===r||n||!o&&this._usedWords.length)}},{key:"isUsedWord",value:function(t){return!!t&&(t=t.toLowerCase(),!this._usedWords||this._usedWords.find(function(e){return e===t}))}},{key:"addWordRandomly",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!t)return!1;if(!this._usedWords.length){var i=Math.floor(.5*(this._boardSize-t.length)),r=Math.ceil(.5*this._boardSize);return this.addWord(i,r,t,!1),!0}for(var n=0;n<this._boardSize;n++)for(var o=0;o<this._boardSize;o++){var s=this._board[n][o];if(this._isAString(s))for(var a=0;a<t.length;a++){if(t[a]===s)for(var u=1;u>=0;u--){var h=!!u,l=h?o:o-a,c=h?n-a:n;if(this.addWord(l,c,t,h,e))return!0}}}return!1}},{key:"addWord",value:function(t,e,i,n){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;return!i||i.length<3?(console.log("word length is less than 3 letters!"),!1):this.checkPossibleCells(t,e,n,i.length)?this.isUsedWord(i)?(console.log("word is already used"),!1):this._checkPossibleLetters(t,e,i,n)?([].concat(r(i)).forEach(function(i,r){var o=e+(n?r:0),s=t+(n?0:r);this._board[o][s]=i.toLowerCase();for(var a=0;a<2;a++){var u=s+(n?a?1:-1:0),h=o+(n?0:a?1:-1);if(!(u<0||u>=this._boardSize||h<0||h>=this._boardSize)){var l=this._board[h][u];n&&!this._isAVerticalBlocker(l)&&(this._board[h][u]+=1),n||this._isAHorizontalBlocker(l)||(this._board[h][u]+=2)}}},this),n?(e&&(this._board[e-1][t]=3),e+i.length<this._boardSize&&(this._board[e+i.length][t]=3)):(t&&(this._board[e][t-1]=3),t+i.length<this._boardSize&&(this._board[e][t+i.length]=3)),this._usedWords&&this._usedWords.length>1&&(this._points+=o),this._usedWords.push(i),!0):(console.log("possible letters check failed!"),!1):(console.log("possible cells check failed!"),!1)}},{key:"getHintFromWordsArray",value:function(t){if(!t||!t.length)return null;var e=null;this._usedWords.length||(e=t[0]);for(var i=0;i<t.length;i++)if(this._usedWords.indexOf(t[i])<0&&t.length>3){e=t[i];break}return e}},{key:"_isAString",value:function(t){return"string"==typeof t}},{key:"_isANumber",value:function(t){return!this._isAString(t)}},{key:"_isAVerticalBlocker",value:function(t){return this._isAString(t)||1===t||t>=3}},{key:"_isAHorizontalBlocker",value:function(t){return this._isAString(t)||2===t||t>=3}},{key:"_checkPossibleLetters",value:function(t,e,i){for(var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=0;o<i.length;o++){var s=n?t:t+o,a=n?e+o:e,u=this._board[a][s];if(this._isAString(u)&&u!==[].concat(r(i))[o])return!1}return!0}},{key:"_cleanBoard",value:function(){if(this._board=[],this._boardSize)for(var t=0;t<this._boardSize;t++){for(var e=[],i=0;i<this._boardSize;i++)e.push(0);this._board.push(e)}}},{key:"_findPossibleRegExp",value:function(t,e){for(var i=[],r=!1,n=0;n<2;n++){r=!!n;var o=this._generateRegExp(t,e,r);o&&i.indexOf(o)<0&&i.push(o)}return i}},{key:"_generateRegExp",value:function(t,e,i){var r=this,n="",o=Math.max(this._boardSize-(i?e:t),i?e:t),s=new Array(this._boardSize);s[i?e:t]=this._board[e][t];for(var a=!1,u=!1,h=0,l=function(t){var e=i&&r._isAVerticalBlocker(t),n=!i&&r._isAHorizontalBlocker(t);return e||n},c=1;c<=o;c++){var f=null,d=null,p=null;(i?e:t)-c>=0&&!a&&(p=this._board[i?e-c:e][i?t:t-c],f=i?e-c:t-c,d=i?e-c+1:t-c+1,l(p)?this._isAString(p)&&!h?(s[f]=p,h++):(a=!0,this._isAString(p)&&(s[d]=null)):s[f]="[a-z]"),(i?e:t)+c<this._boardSize&&!u&&(p=this._board[i?e+c:e][i?t:t+c],f=i?e+c:t+c,d=i?e+c-1:t+c-1,l(p)?this._isAString(p)&&!h?(s[f]=p,h++):(u=!0,this._isAString(p)&&(s[d]=null)):s[f]="[a-z]")}n+="^(";var _=0,v=0;return h=0,s.forEach(function(t,e){t&&"[a-z]"===t?_++:t&&(1===++h?n+="[a-z]{0,"+_+"}"+t.toLowerCase():2===h&&(n+="[a-z]{"+_+"}"+t.toLowerCase()),v+=_,_=0)},this),_&&(n+="[a-z]{0,"+_+"}"),n+=")$",(v+=_)||(n=null),n}}]),t}();e.default=s,t.exports=e.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,